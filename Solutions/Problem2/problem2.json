{
    "problem_num": 2,
    "problem_name": "Add Two Numbers",
    "description": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.",
    "difficulty": "Medium",
    "acceptance": 75,
    "Expected_Time_Constraints": "O(max(n,m))",
    "Expected_Space_Constraints": "O(max(n,m))",
    "templates": {
      "javascript": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\nfunction addTwoNumbers(l1, l2) {\n    // Your code here\n}",
      "python": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\ndef add_two_numbers(l1: ListNode, l2: ListNode) -> ListNode:\n    # Your code here\n    pass",
      "java": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        // Your code here\n    }\n}",
      "cpp": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        // Your code here\n    }\n};",
      "go": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {\n    // Your code here\n}",
      "rust": "// Definition for singly-linked list.\n#[derive(PartialEq, Eq, Clone, Debug)]\npub struct ListNode {\n    pub val: i32,\n    pub next: Option<Box<ListNode>>\n}\nimpl Solution {\n    pub fn add_two_numbers(l1: Option<Box<ListNode>>, l2: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\n        // Your code here\n    }\n}"
    },
    "Run_testCases": [
      {
        "input": {
          "l1": [2,4,3],
          "l2": [5,6,4]
        },
        "expected": [7,0,8]
      },
      {
        "input": {
          "l1": [0],
          "l2": [0]
        },
        "expected": [0]
      }
    ],
    "Submit_testCases": [
      { "array": [-1, 0, 3, 5, 9, 12], "target": 9, "expected": 4 },
      { "array": [-1, 0, 3, 5, 9, 12], "target": 2, "expected": -1 },
      { "array": [1], "target": 1, "expected": 0 },
      { "array": [1, 2, 3, 4, 5], "target": 3, "expected": 2 },
      { "array": [-5, -3, 0, 2, 4], "target": -3, "expected": 1 },
      { "array": [1, 3, 5, 7, 9], "target": 8, "expected": -1 },
      { "array": [1, 3, 5, 7, 9], "target": 5, "expected": 2 },
      { "array": [2, 4, 6, 8, 10, 12], "target": 12, "expected": 5 },
      { "array": [2, 4, 6, 8, 10, 12], "target": 2, "expected": 0 },
      { "array": [1, 2, 3, 4, 5, 6, 7], "target": 7, "expected": 6 },
      { "array": [0, 1, 2, 3, 4, 5], "target": 0, "expected": 0 },
      { "array": [-10, -5, 0, 5, 10], "target": -10, "expected": 0 },
      { "array": [-10, -5, 0, 5, 10], "target": 10, "expected": 4 },
      { "array": [1, 3, 5, 7, 9, 11], "target": 6, "expected": -1 },
      { "array": [2, 4, 6, 8], "target": 5, "expected": -1 },
      { "array": [1, 2, 3], "target": 3, "expected": 2 },
      { "array": [1, 2], "target": 1, "expected": 0 },
      { "array": [1, 2], "target": 2, "expected": 1 },
      { "array": [-1], "target": -1, "expected": 0 },
      { "array": [5], "target": 6, "expected": -1 },
      { "array": [1, 3, 5, 7, 9, 11, 13], "target": 13, "expected": 6 },
      { "array": [1, 3, 5, 7, 9, 11, 13], "target": 1, "expected": 0 },
      { "array": [-5, -4, -3, -2, -1], "target": -3, "expected": 2 },
      { "array": [0, 2, 4, 6, 8], "target": 8, "expected": 4 },
      { "array": [1, 2, 3, 4, 5], "target": 6, "expected": -1 },
      { "array": [10, 20, 30, 40, 50], "target": 30, "expected": 2 },
      { "array": [2, 4, 6, 8, 10], "target": 5, "expected": -1 },
      { "array": [1, 3, 5, 7], "target": 7, "expected": 3 },
      { "array": [-2, 0, 2, 4], "target": -2, "expected": 0 },
      { "array": [1, 2, 3, 4, 5], "target": 1, "expected": 0 },
      { "array": [0, 1, 2, 3, 4], "target": 4, "expected": 4 },
      { "array": [-3, -2, -1, 0], "target": 1, "expected": -1 },
      { "array": [1, 3, 5, 7, 9], "target": 3, "expected": 1 },
      { "array": [2, 4, 6, 8, 10], "target": 10, "expected": 4 },
      { "array": [1, 2, 3, 4, 5], "target": 5, "expected": 4 },
      { "array": [-5, -3, -1, 1, 3], "target": -5, "expected": 0 },
      { "array": [0, 2, 4, 6, 8], "target": 4, "expected": 2 },
      { "array": [1, 3, 5, 7, 9], "target": 9, "expected": 4 },
      { "array": [2, 4, 6, 8, 10], "target": 6, "expected": 2 },
      { "array": [-4, -2, 0, 2, 4], "target": 0, "expected": 2 },
      { "array": [1, 2, 3, 4, 5], "target": 2, "expected": 1 },
      { "array": [0, 2, 4, 6, 8], "target": 6, "expected": 3 },
      { "array": [-3, -1, 1, 3, 5], "target": 5, "expected": 4 },
      { "array": [1, 3, 5, 7, 9], "target": 1, "expected": 0 },
      { "array": [2, 4, 6, 8, 10], "target": 8, "expected": 3 },
      { "array": [-2, 0, 2, 4, 6], "target": 6, "expected": 4 },
      { "array": [1, 2, 3, 4, 5], "target": 4, "expected": 3 },
      { "array": [0, 2, 4, 6, 8], "target": 2, "expected": 1 },
      { "array": [-1, 1, 3, 5, 7], "target": 7, "expected": 4 },
      { "array": [2, 4, 6, 8, 10], "target": 4, "expected": 1 },
      { "array": [-3, -1, 1, 3, 5], "target": -3, "expected": 0 }
    ]
  }