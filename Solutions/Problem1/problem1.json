{
  "problem_num": 1,
  "problem_name": "Two Sum",
  "description": "Given an array of integers nums and an integer target, return indices of the two numbers in the array such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice.",
  "difficulty": "Easy",
  "acceptance": 85,
  "Expected_Time_Constraints": "O(n)",
  "Expected_Space_Constraints": "O(n)",
  "templates": {
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nfunction twoSum(nums, target) {\n    // Your code here\n}",
    "python": "def two_sum(nums: List[int], target: int) -> List[int]:\n    # Your code here\n    pass",
    "java": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        // Your code here\n    }\n}",
    "cpp": "#include <vector>\n\nclass Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        // Your code here\n    }\n};",
    "go": "func twoSum(nums []int, target int) []int {\n    // Your code here\n}",
    "rust": "impl Solution {\n    pub fn two_sum(nums: Vec<i32>, target: i32) -> Vec<i32> {\n        // Your code here\n    }\n}"
  },
  "Run_testCases": [
    {
      "input": {
        "nums": [2, 7, 11, 15],
        "target": 9
      },
      "expected": [0, 1]
    },
    {
      "input": {
        "nums": [3, 2, 4],
        "target": 6
      },
      "expected": [1, 2]
    }
  ],
  "Submit_testCases": [
    { "a": 1, "b": 1, "expected": 2 },
    { "a": 2, "b": 3, "expected": 5 },
    { "a": 0, "b": 0, "expected": 0 },
    { "a": 10, "b": 5, "expected": 15 },
    { "a": -1, "b": -1, "expected": -2 },
    { "a": -5, "b": 10, "expected": 5 },
    { "a": 100, "b": 200, "expected": 300 },
    { "a": 15, "b": 15, "expected": 30 },
    { "a": 7, "b": 8, "expected": 15 },
    { "a": 999, "b": 1, "expected": 1000 },
    { "a": 50, "b": 50, "expected": 100 },
    { "a": 3, "b": 3, "expected": 6 },
    { "a": 17, "b": 3, "expected": 20 },
    { "a": 6, "b": 9, "expected": 15 },
    { "a": 0, "b": 10, "expected": 10 },
    { "a": -10, "b": 5, "expected": -5 },
    { "a": -20, "b": -20, "expected": -40 },
    { "a": 1000, "b": 2000, "expected": 3000 },
    { "a": 45, "b": 55, "expected": 100 },
    { "a": 12, "b": 13, "expected": 25 },
    { "a": 27, "b": 18, "expected": 45 },
    { "a": 33, "b": 17, "expected": 50 },
    { "a": 99, "b": 1, "expected": 100 },
    { "a": 100, "b": 0, "expected": 100 },
    { "a": 0, "b": -100, "expected": -100 },
    { "a": 123, "b": 321, "expected": 444 },
    { "a": -50, "b": 25, "expected": -25 },
    { "a": -25, "b": 50, "expected": 25 },
    { "a": 200, "b": 300, "expected": 500 },
    { "a": 37, "b": 63, "expected": 100 },
    { "a": 0, "b": 1, "expected": 1 },
    { "a": 1, "b": 0, "expected": 1 },
    { "a": -1, "b": 0, "expected": -1 },
    { "a": 0, "b": -1, "expected": -1 },
    { "a": 14, "b": 14, "expected": 28 },
    { "a": 7, "b": 7, "expected": 14 },
    { "a": 25, "b": 25, "expected": 50 },
    { "a": 5, "b": 10, "expected": 15 },
    { "a": 8, "b": 12, "expected": 20 },
    { "a": 11, "b": 11, "expected": 22 },
    { "a": 19, "b": 21, "expected": 40 },
    { "a": 100, "b": 100, "expected": 200 },
    { "a": -100, "b": -100, "expected": -200 },
    { "a": 50, "b": -50, "expected": 0 },
    { "a": -50, "b": 50, "expected": 0 },
    { "a": 12345, "b": 54321, "expected": 66666 },
    { "a": 10, "b": 20, "expected": 30 },
    { "a": 15, "b": 25, "expected": 40 },
    { "a": 32, "b": 48, "expected": 80 },
    { "a": 64, "b": 36, "expected": 100 }
  ]
}
