{
  "problem_num": 10,
  "problem_name": "Regular Expression Matching",
  "description": "Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where '.' matches any single character and '*' matches zero or more of the preceding element.",
  "difficulty": "Hard",
  "acceptance": 55,
  "Expected_Time_Constraints": "O(mn)",
  "Expected_Space_Constraints": "O(mn)",
  "templates": {
    "javascript": "/**\n * @param {string} s\n * @param {string} p\n * @return {boolean}\n */\nfunction isMatch(s, p) {\n    // Your code here\n}",
    "python": "def is_match(s: str, p: str) -> bool:\n    # Your code here\n    pass",
    "java": "class Solution {\n    public boolean isMatch(String s, String p) {\n        // Your code here\n    }\n}",
    "cpp": "class Solution {\npublic:\n    bool isMatch(string s, string p) {\n        // Your code here\n    }\n};",
    "go": "func isMatch(s string, p string) bool {\n    // Your code here\n}",
    "rust": "impl Solution {\n    pub fn is_match(s: String, p: String) -> bool {\n        // Your code here\n    }\n}"
  },
  "Run_testCases": [
    {
      "input": {
        "s": "aa",
        "p": "a"
      },
      "expected": false
    },
    {
      "input": {
        "s": "aa",
        "p": "a*"
      },
      "expected": true
    },
    {
      "input": {
        "s": "ab",
        "p": ".*"
      },
      "expected": true
    }
  ],
  "Submit_testCases": [
    { "array": [1, 2, 3, 4, 5], "target": 1, "expected": 0 },
    { "array": [1, 2, 3, 4, 5], "target": 5, "expected": 4 },
    { "array": [1, 2, 3, 4, 5], "target": 0, "expected": -1 },
    { "array": [10, 20, 30, 40, 50], "target": 30, "expected": 2 },
    { "array": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "target": 6, "expected": 5 },
    { "array": [1, 2, 3, 4, 5], "target": 2, "expected": 1 },
    { "array": [1, 2, 3, 4, 5], "target": 4, "expected": 3 },
    { "array": [1, 2, 3, 4, 5], "target": 3, "expected": 2 },
    { "array": [1, 2, 3, 4, 5], "target": 7, "expected": -1 },
    { "array": [1, 2, 3, 4, 5], "target": -1, "expected": -1 },
    { "array": [1, 2, 3, 4, 5, 6], "target": 1, "expected": 0 },
    { "array": [1, 2, 3, 4, 5, 6], "target": 6, "expected": 5 },
    { "array": [1, 2, 3, 4, 5, 6], "target": 4, "expected": 3 },
    { "array": [1, 2, 3, 4, 5, 6], "target": 0, "expected": -1 },
    { "array": [1, 2, 3, 4, 5, 6], "target": 7, "expected": -1 },
    { "array": [1, 2, 3, 4, 5, 6], "target": 3, "expected": 2 },
    { "array": [10, 20, 30, 40, 50], "target": 10, "expected": 0 },
    { "array": [10, 20, 30, 40, 50], "target": 50, "expected": 4 },
    { "array": [10, 20, 30, 40, 50], "target": 25, "expected": -1 },
    { "array": [10, 20, 30, 40, 50], "target": 40, "expected": 3 },
    { "array": [10, 20, 30, 40, 50], "target": 15, "expected": -1 },
    { "array": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "target": 1, "expected": 0 },
    { "array": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "target": 10, "expected": 9 },
    { "array": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "target": 5, "expected": 4 },
    { "array": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "target": 0, "expected": -1 },
    { "array": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "target": 11, "expected": -1 },
    { "array": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "target": 6, "expected": 5 },
    { "array": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "target": 3, "expected": 2 },
    { "array": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "target": 8, "expected": 7 },
    { "array": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "target": 2, "expected": 1 },
    { "array": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "target": 9, "expected": 8 },
    { "array": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "target": 4, "expected": 3 },
    { "array": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "target": 7, "expected": 6 }
  ]
} 