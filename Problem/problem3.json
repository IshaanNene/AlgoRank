{
    "problem_num": 3,
    "problem_name": "Longest Substring Without Repeating Characters",
    "description": "Given a string s, find the length of the longest substring without repeating characters.",
    "difficulty": "Medium",
    "acceptance": 78,
    "Expected_Time_Constraints": "O(n)",
    "Expected_Space_Constraints": "O(min(m,n))",
    "templates": {
      "javascript": "/**\n * @param {string} s\n * @return {number}\n */\nfunction lengthOfLongestSubstring(s) {\n    // Your code here\n}",
      "python": "def length_of_longest_substring(s: str) -> int:\n    # Your code here\n    pass",
      "java": "class Solution {\n    public int lengthOfLongestSubstring(String s) {\n        // Your code here\n    }\n}",
      "cpp": "class Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        // Your code here\n    }\n};",
      "go": "func lengthOfLongestSubstring(s string) int {\n    // Your code here\n}",
      "rust": "impl Solution {\n    pub fn length_of_longest_substring(s: String) -> i32 {\n        // Your code here\n    }\n}"
    },
    "Run_testCases": [
      {
        "input": {
          "s": "abcabcbb"
        },
        "expected": 3
      },
      {
        "input": {
          "s": "bbbbb"
        },
        "expected": 1
      },
      {
        "input": {
          "s": "pwwkew"
        },
        "expected": 3
      }
    ],
    "Submit_testCases": [
      { "a": 1, "b": 2, "expected": 2 },
      { "a": 5, "b": 3, "expected": 5 },
      { "a": 0, "b": 0, "expected": 0 },
      { "a": 10, "b": 5, "expected": 10 },
      { "a": -1, "b": -1, "expected": -1 },
      { "a": -5, "b": 10, "expected": 10 },
      { "a": 200, "b": 100, "expected": 200 },
      { "a": 15, "b": 15, "expected": 15 },
      { "a": 8, "b": 7, "expected": 8 },
      { "a": 999, "b": 1000, "expected": 1000 },
      { "a": 50, "b": 51, "expected": 51 },
      { "a": 3, "b": -3, "expected": 3 },
      { "a": 17, "b": 3, "expected": 17 },
      { "a": 6, "b": 9, "expected": 9 },
      { "a": 0, "b": 10, "expected": 10 },
      { "a": -10, "b": 5, "expected": 5 },
      { "a": -20, "b": -10, "expected": -10 },
      { "a": 2000, "b": 1000, "expected": 2000 },
      { "a": 45, "b": 55, "expected": 55 },
      { "a": 13, "b": 12, "expected": 13 },
      { "a": 27, "b": 28, "expected": 28 },
      { "a": 33, "b": 17, "expected": 33 },
      { "a": 99, "b": 100, "expected": 100 },
      { "a": 100, "b": 0, "expected": 100 },
      { "a": 0, "b": -100, "expected": 0 },
      { "a": 321, "b": 123, "expected": 321 },
      { "a": -50, "b": 25, "expected": 25 },
      { "a": -25, "b": 50, "expected": 50 },
      { "a": 300, "b": 200, "expected": 300 },
      { "a": 63, "b": 37, "expected": 63 },
      { "a": 0, "b": 1, "expected": 1 },
      { "a": 1, "b": 0, "expected": 1 },
      { "a": -1, "b": 0, "expected": 0 },
      { "a": 0, "b": -1, "expected": 0 },
      { "a": 14, "b": 14, "expected": 14 },
      { "a": 7, "b": 8, "expected": 8 },
      { "a": 25, "b": 24, "expected": 25 },
      { "a": 5, "b": 10, "expected": 10 },
      { "a": 12, "b": 8, "expected": 12 },
      { "a": 11, "b": 11, "expected": 11 },
      { "a": 21, "b": 19, "expected": 21 },
      { "a": 100, "b": 101, "expected": 101 },
      { "a": -100, "b": -99, "expected": -99 },
      { "a": 50, "b": -50, "expected": 50 },
      { "a": -50, "b": 50, "expected": 50 },
      { "a": 54321, "b": 12345, "expected": 54321 },
      { "a": 20, "b": 10, "expected": 20 },
      { "a": 25, "b": 15, "expected": 25 },
      { "a": 48, "b": 32, "expected": 48 },
      { "a": 64, "b": 36, "expected": 64 }
    ]
  }